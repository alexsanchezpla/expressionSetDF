% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expressionSetDF.R
\docType{class}
\name{expressionSetDF}
\alias{expressionSetDF}
\alias{exprs.eDF}
\alias{phenoData.eDF}
\alias{featureData.eDF}
\alias{[.expressionSetDF}
\alias{filterColumns.eDF}
\alias{filterRows.eDF}
\title{Clase expressionSetDF}
\usage{
expressionSetDF(
  exprs = data.frame(),
  phenoData = data.frame(),
  featureData = data.frame()
)

exprs.eDF(object)

phenoData.eDF(object)

featureData.eDF(object)

\method{[}{expressionSetDF}(x, i, j, drop = FALSE, ...)

filterColumns.eDF(object, condition)

filterRows.eDF(object, condition)
}
\arguments{
\item{exprs}{Data frame con datos de expresión genética.}

\item{phenoData}{Data frame con información fenotípica.}

\item{featureData}{Data frame con información de características.}

\item{object}{Un objeto de clase expressionSetDF.}

\item{x}{Un objeto de clase expressionSetDF.}

\item{i}{Índices o condiciones de filas.}

\item{j}{Índices o condiciones de columnas.}

\item{drop}{Indica si se deben eliminar las dimensiones no utilizadas.}

\item{condition}{Condición para filtrar filas.}
}
\value{
Un objeto de clase expressionSetDF.

Un data frame con datos de expresión genética.

Un data frame con información fenotípica.

Un data frame con información de características.

Un nuevo objeto de clase expressionSetDF.

Un nuevo objeto de clase expressionSetDF con las columnas filtradas.

Un nuevo objeto de clase expressionSetDF con las filas filtradas.
}
\description{
Esta clase representa un conjunto de datos de expresión genética con campos exprs,
phenoData y featureData, donde exprs es un data.frame.
}
\section{Slots}{

\describe{
\item{\code{exprs}}{Data frame con datos de expresión genética.}

\item{\code{phenoData}}{Data frame con información fenotípica.}

\item{\code{featureData}}{Data frame con información de características.}
}}

\examples{
es_df <- expressionSetDF(exprs = data.frame(A = c(1, 2, 3), B = c(4, 5, 6)),
                         phenoData = data.frame(Sample = c("S1", "S2", "S3")),
                         featureData = data.frame(Gene = c("G1", "G2")))

exprs.eDF(es_df)

phenoData.eDF(es_df)

featureData.eDF(es_df)

es_subset <- es_df[1:2, ]

filterColumns.eDF(es_df, condition = "sum(.) <= 10")

filterRows.eDF(es_df, condition = "sum(.) > 5")

}
